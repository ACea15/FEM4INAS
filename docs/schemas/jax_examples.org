
* Get expression
#+begin_src python
import jax

def f(x):
  for i in range(5):
    x += i
  return x

print(jax.make_jaxpr(f)(0))
#+end_src

* ODE solvers

** Diffrax
https://github.com/patrick-kidger/diffrax
(pip install diffrax)
#+begin_src python
  from diffrax import diffeqsolve, ODETerm, Dopri5
  import jax.numpy as jnp

  def f(t, y, args):
      return -y

  term = ODETerm(f)
  solver = Dopri5()
  y0 = jnp.array([2., 3.])
  solution = diffeqsolve(term, solver, t0=0, t1=1, dt0=0.1, y0=y0)
#+end_src

* passing functions

#+begin_src python
  import jax
  from jax import Array, jit, numpy as jnp
  from typing import Callable

  def func(a: Array, arg: int) -> Array:
    return a + arg

  @jit
  def myjittedfun(f: Callable, a) -> Array:
     return f(a)

  closure = jax.tree_util.Partial(func, arg=1)
  a = jnp.array([3, 4])
  print(myjittedfun(closure, a))
  # [4 5]
#+end_src



#+begin_src python
  from jax import Array, jit, numpy as jnp
  import jax_dataclasses as jdc


  @jdc.pytree_dataclass
  class MyClosure:
      closure_arg1: int

      def __call__(self, a:Array) -> Array:
          return a + self.closure_arg1

  @jit
  def myjittedfun(closure: MyClosure):
     a = jnp.array([3, 4])
     return closure(a)

  def main():
     closure = MyClosure(closure_arg1=3)
     print(myjittedfun(closure))
#+end_src


